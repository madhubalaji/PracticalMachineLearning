print(t);
t <- 100
print(t)
t <- 1000
return(inv)
return(inv)
}
inv
inv = solve(data,...)
inv = solve(data)
}
## Put comments here that give an overall description of what your
## functions do
## Author : Madhu Balaji
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(inverse) m <<- Inverse
getInv <- function() m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv = solve(data)
x$setInv(inv)
inv
}
test = function(mat9) {
temp = makeCacheMatrix(mat9)
cacheSolve(temp)
}
test = function(mat9) {
/
test = function(mat9) {
temp = makeCacheMatrix(mat9)
cacheSolve(temp)
}
test(mat9 = matrix(1:4,2,2))
test(mat9 = matrix(1:4,2,2))
test(mat9 = matrix(1:4,2,2))
makeCacheMatrix <- function(x = matrix()) {
/
test(mat9 = matrix(1:4,2,2))
test(mat9 = matrix(1:4,2,2))
function(inverse) m <<- Inverse
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
test(mat9 = matrix(1:4,2,2))
test(mat9 = matrix(1:4,2,2))
test(mat9 = matrix(1:4,2,2))
test(mat9 = matrix(1:4,2,2))
testf = function(mat9) {
/
test(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
testf = function(mat9) {
testf = function(mat9) {
testf = function(mat9) {
.
/
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R')
testf()
testf(matrix(1:9,3,3))
testf()
View(testf)
View(testf)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(cacheSolve)
testf(mat9 = 1:4,2,2)
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/cacheMeanSample.R', echo=TRUE)
mytes(c(1,2,3,4))
mytes(c(1,2,3,4))
mytes(c(1,2,3,5))
mytes(c(1,2,3,5))
source('/coursera/RProgram/cacheMeanSample.R', echo=TRUE)
mytes(c(1,2,3,5))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = 1:4,2,2)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
print("getting cached data")
debugSource('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
debugSource('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
debugSource('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
debugSource('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
source('/coursera/RProgram/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
testf(mat9 = matrix(1:4,2,2))
add2 <- function(x,y) {
x+y
}
add2(-2,-4)
retVal <- function(x) {
use  <- x > 10
x[use]
}
retVal(c(23,33,1,34,3,9))
above <- function(x, i) {
val <- x > i
x[val]
}
above(c(22,44,20,4,2,99), 21)
above(c(22,44,20,4,2,99), 2)
above(c(22,44,20,4,2,99))
above <- function(x, i = 9) {
val <- x > i
x[val]
}
above(c(22,44,20,4,2,99))
colMean <- function(x, removeNA = TRUE) {
nc = ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
x <- matrix(1:6, 1,6)
colMean(x)
x <- matrix(1:100, 10,10)
colMean(x)
x
colMean <- function(x, removeNA = TRUE) {
nc = ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
colMean(x, FALSE)
plot(3,5,"l")
plot(3,5,"l",3)
plot(3,5,"c")
plot("Da","Ta","c")
plot("Da","Ta","l")
plot(10,10,"Da","Ta","l")
plot(10,10,"Da","Ta")
plot(10,10)
plot(10,10,"o")
plot(10,20,...)
plot(10,20,... = "l")
plot(...,10,20)
warnings()
plot.design(10,2,fun=mean(248.2))
plot.design(10,2,fun=mean)
plot.design(10,2+3,fun=mean)
plot.design(10*2,2+3,)
plot.design(10*2,2+3)
plot.design(10*2,2+3,"l")
plot()
help( (plot)
/
)
help("plot")
plot(10,10,... = par("ask"))
plot(3,5,"l")
search()
f <- function(x,y) {
zz
}
f(10,2)
f <- function(x,y) {
z
}
f(10,2)
f <- function(x,y) {
(x+y)z
}
f <- function(x,y) {
(x+y) * z
}
f(10,2)
z < 10
z <- 10
f(10,2)
f <- function(x,y) {
(x+y) * z2
}
f(10,2)
f <- function(x,y) {
(x+y) * nc
}
f(10,2)
colMean <- function(x, removeNA = TRUE) {
nc = ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
f <- function(x,y) {
(x+y) * nc
}
f(10,2)
f <- function(x,y) {
(x+y) * i
}
f(10,2)
ls(environment(n))
ls(environment(x))
cube < make.power(2)
cube <- make.power(2)
f <- function(y) {
foo <- function(n) {
n^y
}
foo
}
l <- f(2)
foo(2)
foo(l)
cube <- f(3)
square <- f(2)
cube(2)
square(2)
ls(environment(cube))
ls(environment(square))
get(foo,environment(cube))
get(n,environment(cube))
get(y,environment(cube))
ls(environment(square))
ls(environment(cube))
get(y,environment(cube))
n <- 10
f <- function(x) {
n<- 2
n^2 + g(x)
}
g <- function(no) {
no*2
}
f(2)
f(3)
f
f(n)
n
POSIZct
POSIXct
x <- as.Date("01-01-1990")
x
unclass(x)
x <- as.Date("1990-01-01")
x
unclass(x)
weekdays(2)
weekdays(2,2)
weekdays(2,"TU")
wee
.
Sys.time()
x <- Sys.time()
y <- as.POSIXlt(x)
unclass(y)
y$sec
?strptime
cube <- function(x,y) {
x^3
}
cube(3)
x<- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x<- 5
y <- if(x < 5 ) {}
x<-5
y <- if(x<5){
NA
}
else {
10
}
x<-5
y <- if(x<5){
NA
}
else {
10
}
y <- if(x<5) {
NA
} else {
10
}
y
help("environment")
ls(environment())
x <- 1:10
if(x > 5) {x<-0}
help("parent.frame")
library(datasets)
data("iris")
?iris
mean(Sepal.Length)
mean('Sepal.Length')
mean(iris, 'Sepal.Length')
mean(iris$Sepal.Length)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
library(datasets)
data("iris")
mean(iris[iris$Species == "virginica"]$Sepal.Length )
mean(iris[iris$Species == "virginica",]$Sepal.Length )
library(datasets)
data(mtcars)
mean(mtcars[mtcars$cyl == '4',]$hp, mtcars[mtcars$cyl == '8',]$hp)
mean(mtcars[mtcars$cyl == '4',]$hp - mtcars[mtcars$cyl == '8',]$hp)
mean(mtcars[mtcars$cyl == '4',]$hp) - mean(mtcars[mtcars$cyl == '8',]$hp)
mean(mtcars[mtcars$cyl == '8',]$hp) - mean(mtcars[mtcars$cyl == '4',]$hp)
debug(ls)
ls
ls
corr
ls
ls
debug()
debug
deb
ls
debug(ls)
ls
library(caret)
library(ggplot2)
library(gtable)
caret
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("caret")
setwd("/")
setwd("/coursera/PracticalMachineLearning")
library(caret)
library(caret , dep = 'TRUE')
library('caret' , dep = 'TRUE')
install.packages("caret", dependencies = 'TRUE')
install.packages("caret", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library('caret')
help library
library
help(library)
library(caret, lib.loc = '/var/folders/zx/jck88vx556qdbqclb95qfs880000gn/T//RtmpWBK92V/downloaded_packages')
library(caret, lib.loc = /var/folders/zx/jck88vx556qdbqclb95qfs880000gn/T//RtmpWBK92V/downloaded_packages)
library('caret', lib.loc = '/var/folders/zx/jck88vx556qdbqclb95qfs880000gn/T//RtmpWBK92V/downloaded_packages')
install.packages('caret', dep = TRUE)
